version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: storyline-postgres
    environment:
      POSTGRES_DB: storyline
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - storyline-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: storyline-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - storyline-network

  # ChromaDB Vector Database
  chromadb:
    image: chromadb/chroma:latest
    container_name: storyline-chromadb
    ports:
      - "8000:8000"
    volumes:
      - chroma_data:/chroma/chroma
    environment:
      - IS_PERSISTENT=TRUE
    networks:
      - storyline-network

  # Neo4j Graph Database (for Graph RAG)
  neo4j:
    image: neo4j:5-community
    container_name: storyline-neo4j
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    environment:
      NEO4J_AUTH: neo4j/password123
      NEO4J_PLUGINS: '["apoc", "graph-data-science"]'
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
    networks:
      - storyline-network

  # MinIO (S3-compatible object storage)
  minio:
    image: minio/minio:latest
    container_name: storyline-minio
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    volumes:
      - minio_data:/data
    networks:
      - storyline-network

  # API Gateway
  api:
    build:
      context: ./services/api
      dockerfile: Dockerfile
    container_name: storyline-api
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: development
      PORT: 3000
      DATABASE_URL: postgresql://postgres:postgres123@postgres:5432/storyline
      REDIS_URL: redis://redis:6379
      CHROMA_URL: http://chromadb:8000
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USER: neo4j
      NEO4J_PASSWORD: password123
      S3_ENDPOINT: http://minio:9000
    depends_on:
      - postgres
      - redis
      - chromadb
      - neo4j
      - minio
    volumes:
      - ./services/api:/app
      - /app/node_modules
    networks:
      - storyline-network

  # Authentication Service
  auth:
    build:
      context: ./services/auth
      dockerfile: Dockerfile
    container_name: storyline-auth
    ports:
      - "3001:3001"
    environment:
      NODE_ENV: development
      PORT: 3001
      DATABASE_URL: postgresql://postgres:postgres123@postgres:5432/storyline
      REDIS_URL: redis://redis:6379
    depends_on:
      - postgres
      - redis
    volumes:
      - ./services/auth:/app
      - /app/node_modules
    networks:
      - storyline-network

  # AI Orchestrator
  ai-orchestrator:
    build:
      context: ./services/ai-orchestrator
      dockerfile: Dockerfile
    container_name: storyline-ai-orchestrator
    ports:
      - "3002:3002"
    environment:
      NODE_ENV: development
      PORT: 3002
      REDIS_URL: redis://redis:6379
      CHROMA_URL: http://chromadb:8000
      NEO4J_URI: bolt://neo4j:7687
    depends_on:
      - redis
      - chromadb
      - neo4j
    volumes:
      - ./services/ai-orchestrator:/app
      - /app/node_modules
    networks:
      - storyline-network

  # Voice Processing Service
  voice-processing:
    build:
      context: ./services/voice-processing
      dockerfile: Dockerfile
    container_name: storyline-voice-processing
    ports:
      - "3003:3003"
    environment:
      NODE_ENV: development
      PORT: 3003
      REDIS_URL: redis://redis:6379
      S3_ENDPOINT: http://minio:9000
    depends_on:
      - redis
      - minio
    volumes:
      - ./services/voice-processing:/app
      - /app/node_modules
    networks:
      - storyline-network

  # Memory Service
  memory:
    build:
      context: ./services/memory
      dockerfile: Dockerfile
    container_name: storyline-memory
    ports:
      - "3004:3004"
    environment:
      NODE_ENV: development
      PORT: 3004
      CHROMA_URL: http://chromadb:8000
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USER: neo4j
      NEO4J_PASSWORD: password123
    depends_on:
      - chromadb
      - neo4j
    volumes:
      - ./services/memory:/app
      - /app/node_modules
    networks:
      - storyline-network

  # Nginx Reverse Proxy (optional, for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: storyline-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./infrastructure/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - api
    networks:
      - storyline-network

volumes:
  postgres_data:
  redis_data:
  chroma_data:
  neo4j_data:
  neo4j_logs:
  minio_data:

networks:
  storyline-network:
    driver: bridge