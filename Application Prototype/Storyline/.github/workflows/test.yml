name: Storyline Test Suite

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  # Critical safety tests - MUST PASS
  emotional-safety:
    name: Emotional Safety Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run Emotional Safety Tests
        run: |
          npx jest tests/emotional-safety --verbose
          # These tests MUST pass - zero tolerance for failures
        
      - name: Check Crisis Detection Coverage
        run: |
          npx jest tests/emotional-safety/crisis-detection.test.ts --coverage
          # Ensure 100% coverage for crisis detection

  # Voice processing tests - Core feature
  voice-processing:
    name: Voice Processing Tests
    runs-on: ubuntu-latest
    needs: emotional-safety # Only run if safety tests pass
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run Voice Processing Tests
        run: |
          cd services/voice-processing
          npm test
      
      - name: Check Voice Accuracy Requirements
        run: |
          # Run accuracy baseline checks
          ./scripts/run-voice-tests.sh

  # Service unit tests
  service-tests:
    name: Service Tests - ${{ matrix.service }}
    runs-on: ubuntu-latest
    needs: emotional-safety
    strategy:
      matrix:
        service:
          - auth
          - ai-orchestrator
          - memory
          - narrative-analysis
          - document-export
          - api
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run ${{ matrix.service }} tests
        run: |
          cd services/${{ matrix.service }}
          npm test -- --passWithNoTests

  # Integration tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [emotional-safety, voice-processing, service-tests]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_DB: storyline_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run Integration Tests
        env:
          DATABASE_URL: postgresql://postgres:test@localhost:5432/storyline_test
          REDIS_URL: redis://localhost:6379
        run: |
          npx jest tests/integration --runInBand

  # Code coverage and quality gates
  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    needs: [emotional-safety, voice-processing, service-tests, integration-tests]
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Generate Coverage Report
        run: |
          npm run test:coverage
      
      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true
      
      - name: Check Coverage Thresholds
        run: |
          # Critical services must have >80% coverage
          # Emotional safety must have 100% coverage
          node scripts/check-coverage-thresholds.js
      
      - name: TypeScript Check
        run: npm run typecheck
      
      - name: Lint Check
        run: npm run lint

  # Performance benchmarks (optional, non-blocking)
  performance-benchmarks:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: [emotional-safety, voice-processing]
    continue-on-error: true # Don't block PR on performance
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run Performance Tests
        run: |
          npm run test:performance
      
      - name: Upload Benchmark Results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: performance-results.json

# Status check requirements for merging
# Required checks:
# - emotional-safety
# - voice-processing  
# - service-tests (all)
# - integration-tests
# - quality-gates

# Optional checks:
# - performance-benchmarks